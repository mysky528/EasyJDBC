package {{package}}.statement

import {{package}}.{{prefix}}Connection
import {{package}}.metadata.{{prefix}}ResultSetMetaData
import java.io.InputStream
import java.io.Reader
import java.lang.IndexOutOfBoundsException
import java.math.BigDecimal
import java.net.URL
import java.sql.*
import java.sql.Date
import java.util.*

class {{prefix}}PreparedStatement(sql: String, conn: {{prefix}}Connection) : {{prefix}}AbsStatement(sql, conn), PreparedStatement {

    private val parameters = mutableMapOf<Int, String?>()

    override fun execute(): Boolean {
        replaceSQL()
        return super.executeForResultSet(sql)
    }

    override fun execute(sql: String): Boolean {
        this.sql = sql
        return this.execute()
    }

    override fun execute(sql: String, autoGeneratedKeys: Int) = execute(sql)

    override fun execute(sql: String, columnIndexes: IntArray?) = execute(sql)

    override fun execute(sql: String, columnNames: Array<out String>?) = execute(sql)

    override fun getResultSetType() = ResultSet.TYPE_FORWARD_ONLY

    override fun clearParameters() {
        parameters.clear()
    }

    override fun getConnection() = this.connection

    override fun setLong(parameterIndex: Int, x: Long) {
        pushIntoParameters(parameterIndex, x.toString())
    }

    override fun getWarnings(): SQLWarning? = null

    override fun executeQuery(): ResultSet {
        this.execute()
        return this.resultSet
    }

    override fun executeQuery(sql: String): ResultSet {
        execute(sql)
        return this.resultSet
    }

    override fun close() {
        isClosed = true
    }

    override fun isClosed() = isClosed

    override fun setNString(parameterIndex: Int, value: String?) {
        pushIntoParameters(parameterIndex, value)
    }

    override fun getMaxFieldSize() = 0

    override fun setURL(parameterIndex: Int, x: URL?) {
        pushIntoParameters(parameterIndex, x.toString())
    }

    override fun getUpdateCount() = 0

    override fun setFloat(parameterIndex: Int, x: Float) {
        pushIntoParameters(parameterIndex, x.toString())
    }

    override fun getFetchSize() = 0

    override fun executeBatch(): IntArray? = null

    override fun getQueryTimeout() = 0

    override fun isPoolable() = false

    override fun setInt(parameterIndex: Int, x: Int) {
        pushIntoParameters(parameterIndex, x.toString())
    }

    override fun getGeneratedKeys(): ResultSet? = null

    override fun getResultSetConcurrency() = ResultSet.CONCUR_READ_ONLY

    override fun getResultSet() = this.resultSet

    override fun setDouble(parameterIndex: Int, x: Double) {
        pushIntoParameters(parameterIndex, x.toString())
    }

    override fun getParameterMetaData(): ParameterMetaData? = null

    override fun executeUpdate(): Int {
        replaceSQL()
        return executeForResult(sql)
    }

    override fun executeUpdate(sql: String): Int {
        replaceSQL()
        return executeForResult(sql)
    }

    override fun executeUpdate(sql: String, autoGeneratedKeys: Int) = executeUpdate(sql)


    override fun executeUpdate(sql: String, columnIndexes: IntArray?) = executeUpdate(sql)

    override fun executeUpdate(sql: String, columnNames: Array<out String>?) = executeUpdate(sql)

    override fun isCloseOnCompletion() = false

    override fun getMaxRows() = 0

    override fun setBigDecimal(parameterIndex: Int, x: BigDecimal?) {
        pushIntoParameters(parameterIndex, x?.toPlainString())
    }

    override fun setString(parameterIndex: Int, x: String?) {
        pushIntoParameters(parameterIndex, x)
    }

    override fun setTimestamp(parameterIndex: Int, x: Timestamp?) {
        pushIntoParameters(parameterIndex, x.toString())
    }

    override fun setTimestamp(parameterIndex: Int, x: Timestamp?, cal: Calendar?) {
        pushIntoParameters(parameterIndex, x.toString())
    }

    override fun setShort(parameterIndex: Int, x: Short) {
        pushIntoParameters(parameterIndex, x.toString())
    }

    override fun getMetaData() = {{prefix}}ResultSetMetaData()

    override fun getFetchDirection() = ResultSet.FETCH_FORWARD

    override fun getResultSetHoldability() = ResultSet.CLOSE_CURSORS_AT_COMMIT

    override fun setBoolean(parameterIndex: Int, x: Boolean) {
        pushIntoParameters(parameterIndex, x.toString())
    }

    override fun getMoreResults() = false

    override fun getMoreResults(current: Int) = false

    override fun setTime(parameterIndex: Int, x: Time?) {
        pushIntoParameters(parameterIndex, x.toString())
    }

    override fun setTime(parameterIndex: Int, x: Time?, cal: Calendar?) {
        pushIntoParameters(parameterIndex, x.toString())
    }

    override fun setDate(parameterIndex: Int, x: Date?) {
        pushIntoParameters(parameterIndex, x.toString())
    }

    override fun setDate(parameterIndex: Int, x: Date?, cal: Calendar?) {
        pushIntoParameters(parameterIndex, x.toString())
    }

    private fun pushIntoParameters(index: Int, value: String?) {
        if (index <= 0) throw SQLException("Invalid position for parameter ($index)")
        this.parameters[index] = value
    }

    private fun replaceSQL() {
        var idx = 1
        while (sql.indexOf("?") > 1) {
            try {
                val p = parameters[idx]
                sql = sql.replaceFirst("?", if (p == null) "null" else "'$p'")
            } catch (e: IndexOutOfBoundsException) {
                throw SQLException("Can't find defined parameter for position: $idx")
            }
            idx++
        }
    }

    // ==== do nothing =========

    override fun closeOnCompletion() {
        // do nothing
    }

    override fun addBatch(sql: String) {
        // do nothing
    }

    override fun cancel() {
        // do nothing
    }

    override fun clearBatch() {
        // do nothing
    }

    override fun clearWarnings() {
        // do nothing
    }

    // ==== unsupported =========

    override fun <T : Any> unwrap(iface: Class<T>): T? {
        throw SQLFeatureNotSupportedException("unwrap")
    }

    override fun isWrapperFor(iface: Class<*>): Boolean {
        throw SQLFeatureNotSupportedException("isWrapperFor")
    }

    override fun setQueryTimeout(seconds: Int) {
        throw SQLFeatureNotSupportedException("setQueryTimeout")
    }

    override fun setPoolable(poolable: Boolean) {
        throw SQLFeatureNotSupportedException("setPoolable")
    }

    override fun setMaxRows(max: Int) {
        throw SQLFeatureNotSupportedException("setMaxRows")
    }

    override fun setMaxFieldSize(max: Int) {
        throw SQLFeatureNotSupportedException("setMaxFieldSize")
    }

    override fun setFetchSize(rows: Int) {
        throw SQLFeatureNotSupportedException("setFetchSize")
    }

    override fun setFetchDirection(direction: Int) {
        throw SQLFeatureNotSupportedException("setFetchDirection")
    }

    override fun setEscapeProcessing(enable: Boolean) {
        throw SQLFeatureNotSupportedException("setEscapeProcessing")
    }

    override fun setCursorName(name: String) {
        throw SQLFeatureNotSupportedException("setCursorName")
    }

    override fun setUnicodeStream(parameterIndex: Int, x: InputStream?, length: Int) {
        throw SQLFeatureNotSupportedException("setUnicodeStream")
    }

    override fun setSQLXML(parameterIndex: Int, xmlObject: SQLXML?) {
        throw SQLFeatureNotSupportedException("setSQLXML")
    }

    override fun setRowId(parameterIndex: Int, x: RowId?) {
        throw SQLFeatureNotSupportedException("setRowId")
    }

    override fun addBatch() {
        throw SQLFeatureNotSupportedException("addBatch")
    }

    override fun setArray(parameterIndex: Int, x: java.sql.Array?) {
        throw SQLFeatureNotSupportedException("setArray")
    }

    override fun setAsciiStream(parameterIndex: Int, x: InputStream?, length: Int) {
        throw SQLFeatureNotSupportedException("setAsciiStream")
    }

    override fun setAsciiStream(parameterIndex: Int, x: InputStream?, length: Long) {
        throw SQLFeatureNotSupportedException("setAsciiStream")
    }

    override fun setAsciiStream(parameterIndex: Int, x: InputStream?) {
        throw SQLFeatureNotSupportedException("setAsciiStream")
    }

    override fun setBinaryStream(parameterIndex: Int, x: InputStream?, length: Int) {
        throw SQLFeatureNotSupportedException("setBinaryStream")
    }

    override fun setBinaryStream(parameterIndex: Int, x: InputStream?, length: Long) {
        throw SQLFeatureNotSupportedException("setBinaryStream")
    }

    override fun setBinaryStream(parameterIndex: Int, x: InputStream?) {
        throw SQLFeatureNotSupportedException("setBinaryStream")
    }

    override fun setBlob(parameterIndex: Int, x: Blob?) {
        throw SQLFeatureNotSupportedException("setBlob")
    }

    override fun setBlob(parameterIndex: Int, inputStream: InputStream?, length: Long) {
        throw SQLFeatureNotSupportedException("setBlob")
    }

    override fun setBlob(parameterIndex: Int, inputStream: InputStream?) {
        throw SQLFeatureNotSupportedException("setBlob")
    }

    override fun setByte(parameterIndex: Int, x: Byte) {
        throw SQLFeatureNotSupportedException("setByte")
    }

    override fun setBytes(parameterIndex: Int, x: ByteArray?) {
        throw SQLFeatureNotSupportedException("setBytes")
    }

    override fun setCharacterStream(parameterIndex: Int, reader: Reader?, length: Int) {
        throw SQLFeatureNotSupportedException("setCharacterStream")
    }

    override fun setCharacterStream(parameterIndex: Int, reader: Reader?, length: Long) {
        throw SQLFeatureNotSupportedException("setCharacterStream")
    }

    override fun setCharacterStream(parameterIndex: Int, reader: Reader?) {
        throw SQLFeatureNotSupportedException("setCharacterStream")
    }

    override fun setClob(parameterIndex: Int, x: Clob?) {
        throw SQLFeatureNotSupportedException("setClob")
    }

    override fun setClob(parameterIndex: Int, reader: Reader?, length: Long) {
        throw SQLFeatureNotSupportedException("setClob")
    }

    override fun setClob(parameterIndex: Int, reader: Reader?) {
        throw SQLFeatureNotSupportedException("setClob")
    }

    override fun setNCharacterStream(parameterIndex: Int, value: Reader?, length: Long) {
        throw SQLFeatureNotSupportedException("setNCharacterStream")
    }

    override fun setNCharacterStream(parameterIndex: Int, value: Reader?) {
        throw SQLFeatureNotSupportedException("setNCharacterStream")
    }

    override fun setNClob(parameterIndex: Int, value: NClob?) {
        throw SQLFeatureNotSupportedException("setNClob")
    }

    override fun setNClob(parameterIndex: Int, reader: Reader?, length: Long) {
        throw SQLFeatureNotSupportedException("setNClob")
    }

    override fun setNClob(parameterIndex: Int, reader: Reader?) {
        throw SQLFeatureNotSupportedException("setNClob")
    }

    override fun setNull(parameterIndex: Int, sqlType: Int) {
        throw SQLFeatureNotSupportedException("setNull")
    }

    override fun setNull(parameterIndex: Int, sqlType: Int, typeName: String) {
        throw SQLFeatureNotSupportedException("setNull")
    }

    override fun setObject(parameterIndex: Int, x: Any?, targetSqlType: Int) {
        throw SQLFeatureNotSupportedException("setObject")
    }

    override fun setObject(parameterIndex: Int, x: Any?) {
        throw SQLFeatureNotSupportedException("setObject")
    }

    override fun setObject(parameterIndex: Int, x: Any?, targetSqlType: Int, scaleOrLength: Int) {
        throw SQLFeatureNotSupportedException("setObject")
    }

    override fun setRef(parameterIndex: Int, x: Ref?) {
        throw SQLFeatureNotSupportedException("setRef")
    }

}